#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import sys

import math
import time
import datetime
import rospy
import std_msgs
import actionlib
import json
from std_msgs.msg import String
from std_msgs.msg import Float32
from std_msgs.msg import Float32MultiArray
from arom.srv import *
from arom.msg import *
from arom_telescope.msg import *
#from arom_telescope.srv import *
import numpy as np
import pprint 
pp = pprint.PrettyPrinter(indent=4)

from arom_helper import AromNode


from pydirectmount.drive import drive

from astropy import units as u
from astropy.time import Time
from astropy.coordinates import SkyCoord  # High-level coordinates
from astropy.coordinates import ICRS, Galactic, FK4, FK5, AltAz  # Low-level frames
from astropy.coordinates import Angle, Latitude, Longitude  # Angles
from astropy.coordinates import EarthLocation
from astropy.coordinates import get_sun #, get_body
#from astropy.coordinates import solar_system_ephemeris
from astroquery.simbad import Simbad

btn_data = []


class accell_helper():
    def __init__(self, pymlab, device, float_average_n = 10, range_x = None, range_y = None):
        self.pymlab = pymlab
        self.device = device
        self.average_n = float_average_n
        (self.rx,self.ry) = eval(self.pymlab(device=self.device, method='get_rotation').value)
        self.rx_min, self.rx_max = self.rx, self.rx
        self.ry_min, self.ry_max = self.ry, self.ry
        if range_x != None: (self.rx_min, self.rx_max) = range_x
        if range_y != None: (self.ry_min, self.ry_max) = range_y
        self.rx_circ = [0]*float_average_n
        self.ry_circ = [0]*float_average_n
        self.circ_position = 0


    def read(self, return_average = False):
        (self.rx,self.ry) = eval(self.pymlab(device=self.device, method='get_rotation').value)
        if(self.rx > self.rx_max): self.rx_max = self.rx
        if(self.rx < self.rx_min): self.rx_min = self.rx
        if(self.ry > self.ry_max): self.ry_max = self.ry
        if(self.ry < self.ry_min): self.ry_min = self.ry

        self.rx_raw, self.ry_raw = self.rx, self.ry

        self.rx_n = (self.rx - self.rx_min) / (self.rx_max - self.rx_min)*100
        self.ry_n = (self.ry - self.ry_min) / (self.ry_max - self.ry_min)*100

        self.rx_circ[self.circ_position] = self.rx_n
        self.ry_circ[self.circ_position] = self.ry_n
        self.circ_position +=1
        if self.circ_position == self.average_n: self.circ_position = 0

        if return_average:
            return(sum(self.rx_circ)/float(len(self.rx_circ)), sum(self.ry_circ)/float(len(self.ry_circ)))
        else:
            return(self.rx_n, self.ry_n)

    def print_last(self):
        print("min:{:08.3f}, {:08.3f}, max:{:08.3f}, {:08.3f}, raw:{:08.3f}, {:08.3f}, range:{:08.3f}, {:08.3f}, avg:{:08.3f}, {:08.3f}".format(self.rx_min, self.ry_min, self.rx_max, self.ry_max, self.rx_raw, self.ry_raw, self.rx_n, self.ry_n, sum(self.rx_circ)/float(len(self.rx_circ)), sum(self.ry_circ)/float(len(self.ry_circ))))
        #        self.pub_ra_xy.publish(x=ra_rx_n, y=ra_ry_n)
        #        print(math.degree(math.asin((ra_rx_n-50)/50)), ra_ry_n)




def callback(recive):
    #for i, type in enumerate(recive.type):
    #    self.data[type] = recive.value[i]
    print recive

def callback_btn(recive):
    global btn_data
    btn_data.append(recive.data)
    print recive, btn_data

class mount(AromNode):
    node_name = "AROM_mount"
    node_type = "mount"
    node_pymlab = True

    def __init__(self, parent = None, arg = None, name = "mount", port="", connect = True, var = {}):
        self.arg = arg
        self.Autoconnect = connect
        self.port = port
        self.parent = parent
        self.name = name
        self.sname = self.name
        self.variables = var
        self.rate = 5

        self.speeds = [0, 10, 20, 40, 80, 160]
        self.raSpeedType = 0
        self.decSpeedType = 0


        #self.mount.Slew(SkyCoord(alt = 45, az = 10, obstime = Time.now(), frame = 'altaz', unit="deg", location = self.mount.getObs()).icrs)

        rospy.Subscriber("/mount/controll", String, callback_btn)
        rospy.Subscriber("/mount/set/offset2", String, self.set_offset)
        rospy.Subscriber("/mount/tracking_status", arom_telescope.msg.time_machine, self.get_tracking)
        rospy.Subscriber("/arom/UI/buttons", String, callback_btn)
        rospy.Subscriber("/ui/Keyboard/out", String, callback_btn)
        #self.pub_tracking_status = rospy.Publisher('/mount/tracking_status',  arom_telescope.msg.time_machine, queue_size=5, latch=True)
        self.pub_status = rospy.Publisher('/mount/status', String, queue_size=10)
        self.pub_radec  = rospy.Publisher('/mount/status/coordinates/RaDec', Float32MultiArray, queue_size=10)
        self.pub_radec_mount  = rospy.Publisher('/mount/status/coordinates/RaDec_mount', Float32MultiArray, queue_size=10) # souradnice, ktere nemaji chybu offsetu
        self.pub_motor_a = rospy.Publisher("/mount/status/motor/ra", std_msgs.msg.String, queue_size=10)
        self.pub_motor_b = rospy.Publisher("/mount/status/motor/dec", std_msgs.msg.String, queue_size=10)

        self.pub_ra_xy = rospy.Publisher("/mount/status/ra/xyPos", arom.msg.xyPos)
        self.pub_dec_xy = rospy.Publisher("/mount/status/dec/xyPos", arom.msg.xyPos)

        #rospy.init_node('AROM_mount')
        AromNode.__init__(self)
        #self.set_feature('mount_position',{'publish': '/mount/status/coordinates/RaDec'})
        #self.set_feature('mount_offset',{'subscrib': '/mount/controll'})
        self.set_feature('mount_slew',{'subscrib': '/mount/controll', 'publish': '/mount/status/coordinates/RaDec'})
        self.set_feature('mount_tracking',{'subscrib': '/mount/controll', 'publish': '/mount/status/coordinates/RaDec'})

        self.set_feature('hbstep_status__1',  {'id': 'motor_a', 'name': 'Motor RA',  'toppic': '/mount/status/motor/ra'})
        self.set_feature('hbstep_status__2',  {'id': 'motor_b', 'name': 'Motor DEC', 'toppic': '/mount/status/motor/dec'})

        self.set_feature('mount_skymap',{})
        #self.set_feature('mount_info',{'type': 'HEQ5', 'mount_mode': 'eq', 'obs_lat': 10.2332, 'obs_lon': 10.2332, 'obs_alt': 10.2332})



        self.mount = drive(profile = 'HEQ5', mode = "eq", connectMethod = 'pymlab_bridge',
            obs_lat = 48.986976, obs_lon = 14.467532, obs_alt = 382, port = self.pymlab)
        self.mount.status_callback = self.mount_status_callback
        self.mount.run()
        self.mount.UnPark()

        self.mount_steps = self.mount.getStepsPerRev()


        modes = self.mount.getTrackingModes()
        '''
        #TODO: odeslat vsechny mozne parametry hodinoveho stroje....
        self.pub_trackingmodes = rospy.Publisher('/mount/modes', arom_telescope.msg.mount_tracking_modes, latch=True, queue_size = 5)
        print(modes)
        self.pub_trackingmodes.publish()
        data = arom_telescope.msg.mount_tracking_modes()
        for i, mode in enumerate(modes):
            print(">>>", i, mode)
            data.mode.append(arom_telescope.msg.mount_tracking_mode)  
            data.mode[i].type = mode
            data.mode[i].name = modes[mode]['name']
            data.mode[i].ra = modes[mode]['ra']
            data.mode[i].dec = modes[mode]['dec']
        print(data)
        self.pub_trackingmodes.publish(data)
        '''

        trackSpd_ra, trackSpd_dec = 0,0

        print(" zinicializovano ")

        rate = rospy.Rate(self.rate)
        ra = 0
        dec = 90


        acel_ra = accell_helper(self.pymlab,  'acel_ra',  float_average_n = 10, range_x=None, range_y=None)
        acel_dec = accell_helper(self.pymlab, 'acel_dec', float_average_n = 10, range_x=None, range_y=None)
 
        while not rospy.is_shutdown():
            try:
           
                (x,y) = acel_ra.read()
                self.pub_ra_xy.publish(x=x, y=y)
                (x,y) = acel_dec.read()
                self.pub_dec_xy.publish(x=x, y=y)
                

                if len(btn_data) > 0:
                    print("btn_data:", btn_data[0], len(btn_data))
                    lastBtn = btn_data[0]
                    btn_data.pop(0)

                    if "name" in lastBtn:
                        split = lastBtn.split(" ")
                        self.mount.Slew(SkyCoord.from_name(split[1]))

                    #elif "solar" in lastBtn:
                    #    split = lastBtn.split(" ")
                    #    self.mount.Slew(get_body(split[1], time = Time.now(), location = self.mount.getObs()).icrs)

                    elif "sun" in lastBtn:
                        print get_sun(Time.now()).icrs

                    elif "altaz" in lastBtn:
                        split = lastBtn.split(" ")
                        self.mount.Slew(SkyCoord(alt = float(split[1]), az = float(split[2]), obstime = Time.now(), frame = 'altaz', unit="deg", location = self.mount.getObs()).icrs)
                    
                    elif "radec" in lastBtn:
                        split = lastBtn.split(" ")
                        self.mount.Slew(SkyCoord(ra = float(split[1]), dec = float(split[2]), obstime = Time.now(), unit="deg", location = self.mount.getObs()).icrs)
                        
                    elif "tle" in lastBtn:
                        split = lastBtn.split(" ")
                        self.mount.StartTrackingTLE(name = split[1])
                        #self.mount.Slew(SkyCoord(alt = float(split[1]), az = float(split[2]), obstime = Time.now(), frame = 'altaz', unit="deg", location = self.mount.getObs()).icrs)
                        
                    elif "resetMount" in lastBtn:
                        self.mount.Reset()

                    elif "spd" in lastBtn:
                        split = lastBtn.split(" ")
                        trackSpd_ra += float(split[1])
                        trackSpd_dec += float(split[2])
                        self.mount.setTrackingSpeed(ra = float(split[1]), dec = float(split[2]))
                        print(split[1], split[2])
                        self.mount.tracking(True)
                        
                    elif lastBtn in ["startTracking"]:
                        self.mount.tracking(True, tracking_mode='sidereal')
                        
                    elif lastBtn in ['stopTracking', 'STOP1']:
                        trackSpd_dec = 1
                        trackSpd_ra = 1
                        self.mount.set_tracking(mode = 'sidereal')
                        
                    elif lastBtn == 'home' or lastBtn == 'KEY_STOP':
                        self.mount.GoPark()

                    elif lastBtn == 'KEY_OK':
                        self.mount.Slew(SkyCoord(ra = float(split[1]), dec = float(split[2]), frame = 'icrs', unit="deg"))

                    elif lastBtn in ['KEY_UP', 'DEC_P1']:
                        trackSpd_dec += 100
                        self.mount.set_tracking(mode = 'sidereal', ra_multiplication = trackSpd_ra, dec_multiplication = trackSpd_dec)

                    elif lastBtn in ['KEY_DOWN', 'DEC_M1']:
                        trackSpd_dec -= 100
                        self.mount.set_tracking(mode = 'sidereal', ra_multiplication = trackSpd_ra, dec_multiplication = trackSpd_dec)

                    elif lastBtn in ['KEY_LEFT', 'RA_P1']:
                        trackSpd_ra += 100
                        self.mount.set_tracking(mode = 'sidereal', ra_multiplication = trackSpd_ra, dec_multiplication = trackSpd_dec)


                    elif lastBtn in ['KEY_RIGHT', 'RA_M1']:
                        trackSpd_ra -= 100
                        self.mount.set_tracking(mode = 'sidereal', ra_multiplication = trackSpd_ra, dec_multiplication = trackSpd_dec)


                    elif lastBtn == 'KEY_MENU':
                        pass
                        #self.mount.Slew(SkyCoord(alt = 1, az = 181+45, obstime = Time.now(), frame = 'altaz', unit="deg", location = self.mount.getObs()).icrs)

                    elif lastBtn == 'KEY_TAB':
                        pass
                        #self.mount.Slew(SkyCoord(alt = 1, az = 181, obstime = Time.now(), frame = 'altaz', unit="deg", location = self.mount.getObs()).icrs)

                    elif lastBtn == 'KEY_PLAY' or lastBtn == "unpark":
                        self.mount.UnPark()

                else:
                    #print "Something else ....."
                    #(ra, dec) = self.mount.getCoordinates('RaDec')
                    #print ra, dec

                    #try:
                    #    mat = Float32MultiArray(data=[ra, dec])
                    #    self.pub_radec.publish(mat)

                    #except Exception, e:
                    #    print e
                    #mat = Float32MultiArray(data=[ra, dec])
                        #mat.layout.dim.append(MultiArrayDimension())
                        #mat.layout.dim[0].label = "RaDec"
                        #mat.layout.dim[0].size = 2
                        #mat.data.
                    #print mat
                    #self.pub_radec.publish(mat)
                    pass


            except Exception, e:
                rospy.logerr(e)
            rate.sleep()


        self.connection.close()

    def set_offset(self, msg):
        array =  msg.data.split(";")
        print array
        self.mount.setOffset(ra=array[0], dec=array[1])

    def sendPosition(self, object):
        try:   
            coord = self.mount.getCoordinates(sky = True)
            coord_mount = self.mount.getCoordinates(sky = False)
            motor_a, motor_b = self.mount.getStepperStatus()

            mat = Float32MultiArray(data=[coord.ra.degree, coord.dec.degree])
            self.pub_radec.publish(mat)
            mat = Float32MultiArray(data=[coord_mount.ra.degree, coord_mount.dec.degree])
            self.pub_radec_mount.publish(mat)

            if motor_a:
                self.pub_motor_a.publish(json.dumps(motor_a, ensure_ascii=False))
            if motor_b:
                self.pub_motor_b.publish(json.dumps(motor_b, ensure_ascii=False))
            mat = Float32MultiArray(data=[coord.ra.degree, coord.dec.degree])
            self.pub_radec.publish(mat)
            mat = Float32MultiArray(data=[coord_mount.ra.degree, coord_mount.dec.degree])
            self.pub_radec_mount.publish(mat)
        except Exception, e:
            print "Err-send", e

    def get_tracking(self, msg):
        print(msg)
        mode = msg.mode
        if not mode in ['sidereal', 'solar', 'lunar', 'custom']:
            return "Not supported command"
        
        if mode == 'custom':
            units = mode.units
            ra = mode.ra
            dec = mode.dec
            return self.mount.set_tracking(mode=mode, units=units, ra=ra, dec=dec)
        else:
            return self.mount.set_tracking(mode=mode)
        

    def mount_status_callback(self, coord, coord_mount, motor_a = False, motor_b = False):
        try:
            if motor_a:
                self.pub_motor_a.publish(json.dumps(motor_a, ensure_ascii=False))
            if motor_b:
                self.pub_motor_b.publish(json.dumps(motor_b, ensure_ascii=False))

            mat = Float32MultiArray(data=[coord.ra.degree, coord.dec.degree])
            self.pub_radec.publish(mat)
            
            mat = Float32MultiArray(data=[coord_mount.ra.degree, coord_mount.dec.degree])
            self.pub_radec_mount.publish(mat)

        except Exception, e:
            print "Err-send", e
            




if __name__ == '__main__':
    m = mount()
